# Generated by Django 4.1.4 on 2022-12-13 21:49

import datetime
from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import lessons.auth
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', lessons.auth.MSMSUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Child',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(help_text='Format: xxxx-xxx,required', max_length=8, unique=True, validators=[django.core.validators.RegexValidator(regex='^\\d\\d\\d\\d-\\d\\d\\d$')])),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('amount_to_be_paid', models.DecimalField(decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('CLOSED', 'Closed')], default='ACTIVE', max_length=7)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('date_paid', models.DateTimeField(default=django.utils.timezone.now)),
                ('administrated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_user', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='student_user', to=settings.AUTH_USER_MODEL)),
                ('invoice', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='lessons.invoice')),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('request_id', models.AutoField(primary_key=True, serialize=False)),
                ('submission_date', models.DateTimeField(auto_now_add=True)),
                ('availability', multiselectfield.db.fields.MultiSelectField(choices=[('MONDAYAM', 'Monday AM'), ('MONDAYPM', 'Monday PM'), ('TUESDAYAM', 'Tuesday AM'), ('TUESDAYPM', 'Tuesday PM'), ('WEDNESDAYAM', 'Wednesday AM'), ('WEDNESDAYPM', 'Wednesday PM'), ('THURSDAYAM', 'Thursday AM'), ('THURSDAYPM', 'Thursday PM'), ('FRIDAYAM', 'Friday AM'), ('FRIDAYPM', 'Friday PM'), ('SATURDAYAM', 'Saturday AM'), ('SATURDAYPM', 'Saturday PM'), ('SUNDAYAM', 'Sunday AM'), ('SUNDAYPM', 'Sunday PM')], default='SUNDAYPM', max_length=200)),
                ('number_of_lessons', models.IntegerField(validators=[django.core.validators.MaxValueValidator(50, message='You cannot have more than 50 lessons per request.'), django.core.validators.MinValueValidator(1, message='You cannot have less than 1 lesson per request.')])),
                ('interval', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(4, message='You cannot have more than 4 weeks between lessons.'), django.core.validators.MinValueValidator(1, message='You cannot have less than 1 weeks between lesson.')])),
                ('duration', models.IntegerField(default=60, validators=[django.core.validators.MaxValueValidator(180, message='You cannot have more than 180 minitues per lesson.'), django.core.validators.MinValueValidator(30, message='You need at least 30 minitues per lesson')])),
                ('lesson_content', models.CharField(max_length=50)),
                ('class_Day', models.CharField(choices=[('MONDAY', 'Monday'), ('TUESDAY', 'Tuesday'), ('WEDNESDAY', 'Wednesday'), ('THURSDAY', 'Thursday'), ('FRIDAY', 'Friday'), ('SATURDAY', 'Saturday'), ('SUNDAY', 'Sunday')], default='MONDAY', max_length=10)),
                ('class_Time', models.TimeField(choices=[(datetime.time(0, 0), '00:00'), (datetime.time(1, 0), '01:00'), (datetime.time(2, 0), '02:00'), (datetime.time(3, 0), '03:00'), (datetime.time(4, 0), '04:00'), (datetime.time(5, 0), '05:00'), (datetime.time(6, 0), '06:00'), (datetime.time(7, 0), '07:00'), (datetime.time(8, 0), '08:00'), (datetime.time(9, 0), '09:00'), (datetime.time(10, 0), '10:00'), (datetime.time(11, 0), '11:00'), (datetime.time(12, 0), '12:00'), (datetime.time(13, 0), '13:00'), (datetime.time(14, 0), '14:00'), (datetime.time(15, 0), '15:00'), (datetime.time(16, 0), '16:00'), (datetime.time(17, 0), '17:00'), (datetime.time(18, 0), '18:00'), (datetime.time(19, 0), '19:00'), (datetime.time(20, 0), '20:00'), (datetime.time(21, 0), '21:00'), (datetime.time(22, 0), '22:00'), (datetime.time(23, 0), '23:00')], default=datetime.time(8, 0))),
                ('start_Date', models.DateTimeField(default=datetime.date(2021, 1, 1))),
                ('isApproved', models.BooleanField(default=False)),
                ('child', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lessons.child')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teacher', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='invoice',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lessons.request'),
        ),
        migrations.AddConstraint(
            model_name='child',
            constraint=models.UniqueConstraint(fields=('name', 'parent'), name='unique_name_and_parent_combination'),
        ),
    ]
